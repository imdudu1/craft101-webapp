# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AccountType {
  KAKAO
  LOCAL
}

type ArticleDetailOutputDto {
  article: Articles
  error: String
  ok: Boolean!
}

enum ArticleType {
  AD
  FREE
}

type Articles {
  articleType: ArticleType!
  author: Users!
  category: Categories!
  comments: [Comments!]!
  createdAt: DateTime!
  discord: String!
  explanation: String!
  homepage: String!
  host: String!
  id: Float!
  name: String!
  playerHistories: [PlayerHistories!]!
  recommendations: [Recommendations!]!
  tags: [Tags!]
  thumbnail: String!
  updatedAt: DateTime!
}

type Categories {
  articles: [Articles!]!
  createdAt: DateTime!
  id: Float!
  name: String!
  updatedAt: DateTime!
}

type Comments {
  article: Articles!
  author: Users!
  content: String!
  createdAt: DateTime!
  id: Float!
  recommendations: [Recommendations!]!
  updatedAt: DateTime!
}

input CreateCommentDto {
  content: String!
}

type CreateRecommendationOutputDto {
  count: Float
  error: String
  ok: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Files {
  createdAt: DateTime!
  id: Float!
  key: String!
  updatedAt: DateTime!
  url: String!
  user: Users!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type MCStatus {
  description: String!
  favicon: String!
  host: String!
  maxPlayers: Float!
  onlinePlayers: Float!
  port: Float!
  protocolVersion: Float!
  version: String!
}

type Mutation {
  addRecommendation(id: Float!, type: RecommendationType!): CreateRecommendationOutputDto!
  createUser(email: String!, nickname: String!, password: String!, username: String!): UserResponse!
  deleteArticle(id: Float!): Boolean!
  deleteCategory(id: Float!): Boolean!
  deleteComments(commentId: Float!): Boolean!
  deleteUser(id: Float!): Boolean!
  editUserAvatar(avatar: Upload!): Boolean!
  fileUpload(file: Upload!): Files!
  newArticle(articleType: ArticleType!, category: Float!, discord: String!, explanation: String!, homepage: String!, host: String!, name: String!, tags: [String!], thumbnail: String!): Articles!
  newCategory(name: String!): Categories!
  newComment(articleId: Float!, comment: CreateCommentDto!): Comments!
  updateArticle(articleType: ArticleType, category: Float, discord: String, explanation: String, homepage: String, host: String, id: Float!, name: String, tags: [String!], thumbnail: String): Articles!
  updateComment(comment: UpdateCommentDto!, commentId: Float!): Comments!
}

type PlayerHistories {
  article: Articles!
  createdAt: DateTime!
  id: Float!
  onlinePlayers: Float!
  updatedAt: DateTime!
}

type Query {
  article(id: Float!): ArticleDetailOutputDto!
  articles(limit: Float!, offset: Float!): [Articles!]!
  categories: [Categories!]!
  category(id: Float!): Categories!
  comments(articleId: Float!): [Comments!]!
  login(password: String!, username: String!): LoginOutput!
  me: UserResponse!
  myArticles: [Articles!]!
  serverArticle(id: Float!): ServerArticleDetailOutputDto!
  tagArticles(tag: String!): [Articles!]!
  tags: [Tags!]!
}

enum RecommendationType {
  ARTICLE
  COMMENT
}

type Recommendations {
  article: Articles
  comment: Comments
  createdAt: DateTime!
  id: Float!
  recommendationType: RecommendationType!
  updatedAt: DateTime!
  user: Users!
}

type ServerArticleDetailOutputDto {
  article: Articles
  error: String
  ok: Boolean!
  status: MCStatus
}

type SubscribeRecommendationDto {
  count: Float!
  id: Float!
  recommendationType: RecommendationType!
}

type Subscription {
  commentAdded(articleId: Float!): Comments!
  recommendationAdded(id: Float!, type: String!): SubscribeRecommendationDto!
}

type Tags {
  articles: [Articles!]!
  createdAt: DateTime!
  id: Float!
  name: String!
  updatedAt: DateTime!
}

input UpdateCommentDto {
  content: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserResponse {
  accountType: AccountType!
  articles: [Articles!]!
  comments: [Comments!]!
  email: String!
  files: [Files!]!
  nickname: String!
  recommendations: [Recommendations!]!
  role: UserRole!
  username: String!
}

enum UserRole {
  ADMIN
  USER
}

type Users {
  accountType: AccountType!
  articles: [Articles!]!
  comments: [Comments!]!
  createdAt: DateTime!
  email: String!
  files: [Files!]!
  id: Float!
  nickname: String!
  recommendations: [Recommendations!]!
  role: UserRole!
  updatedAt: DateTime!
  username: String!
}
